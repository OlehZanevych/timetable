type DepartmentQueries {
    departmentConnection(limit: Int! = 1000, offset: Int! = 0): FacultyConnection
    department(id: ID!): Faculty
}

type DepartmentMutations {
    createDepartment(department: DepartmentInputPayload!): CreateDepartmentResponse !
}

type DepartmentConnection {
    nodes: [Department!]!
    pageInfo: ConnectionPageInfo!
}

type Department {
    id: ID!
    name: String!
    email: String!
    phone: String!
    info: String
    faculty: FacultyItem!
}

type DepartmentItem {
    id: ID!
    name: String!
    email: String!
    phone: String!
    info: String
}

input DepartmentInputPayload {
    name: String!
    facultyId: ID!
    email: String!
    phone: String!
    info: String
}

type CreateDepartmentResponse {
    """
    Flag that indicates whether Department was created successfully
    """
    isSuccess: Boolean!
    """
    Created Department
    """
    data: Department
    """
    Indicates the type of error that caused creation of Department to fail
    """
    errorStatus: InputDepartmentErrorStatus
}

enum InputDepartmentErrorStatus {
    DUPLICATED_NAME
    FACULTY_NOT_FOUND
    INTERNAL_SERVER_ERROR
}